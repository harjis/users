import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
  /** Represents untyped JSON */
  JSON: any;
};

/** Autogenerated input type of CreateUser */
export type CreateUserInput = {
  name: Scalars['String'];
  age: Scalars['Int'];
  email: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateUser */
export type CreateUserPayload = {
  __typename?: 'CreateUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Scalars['JSON'];
  user?: Maybe<User>;
};



export type Mutation = {
  __typename?: 'Mutation';
  createUser?: Maybe<CreateUserPayload>;
};


export type MutationCreateUserArgs = {
  input: CreateUserInput;
};

/** The query root of this schema */
export type Query = {
  __typename?: 'Query';
  /** Find all users */
  users: Array<User>;
  /** Validates a user */
  validateUser: Validation;
};


/** The query root of this schema */
export type QueryValidateUserArgs = {
  name: Scalars['String'];
  age: Scalars['Int'];
  email: Scalars['String'];
};

export type User = {
  __typename?: 'User';
  age: Scalars['Int'];
  createdAt: Scalars['ISO8601DateTime'];
  email: Scalars['String'];
  id: Scalars['ID'];
  name: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
};

export type Validation = {
  __typename?: 'Validation';
  errors: Scalars['JSON'];
  isValid: Scalars['Boolean'];
};

export type CreateUserMutationVariables = Exact<{
  input: CreateUserInput;
}>;


export type CreateUserMutation = (
  { __typename?: 'Mutation' }
  & { createUser?: Maybe<(
    { __typename?: 'CreateUserPayload' }
    & Pick<CreateUserPayload, 'errors'>
    & { user?: Maybe<(
      { __typename?: 'User' }
      & Pick<User, 'name' | 'age' | 'email'>
    )> }
  )> }
);

export type GetUsersQueryVariables = Exact<{ [key: string]: never; }>;


export type GetUsersQuery = (
  { __typename?: 'Query' }
  & { users: Array<(
    { __typename?: 'User' }
    & Pick<User, 'id' | 'age' | 'name' | 'email'>
  )> }
);

export type ValidateUserQueryVariables = Exact<{
  name: Scalars['String'];
  age: Scalars['Int'];
  email: Scalars['String'];
}>;


export type ValidateUserQuery = (
  { __typename?: 'Query' }
  & { validateUser: (
    { __typename?: 'Validation' }
    & Pick<Validation, 'errors' | 'isValid'>
  ) }
);


export const CreateUserDocument = gql`
    mutation CreateUser($input: CreateUserInput!) {
  createUser(input: $input) {
    user {
      name
      age
      email
    }
    errors
  }
}
    `;
export type CreateUserMutationFn = Apollo.MutationFunction<CreateUserMutation, CreateUserMutationVariables>;

/**
 * __useCreateUserMutation__
 *
 * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateUserMutation(baseOptions?: Apollo.MutationHookOptions<CreateUserMutation, CreateUserMutationVariables>) {
        return Apollo.useMutation<CreateUserMutation, CreateUserMutationVariables>(CreateUserDocument, baseOptions);
      }
export type CreateUserMutationHookResult = ReturnType<typeof useCreateUserMutation>;
export type CreateUserMutationResult = Apollo.MutationResult<CreateUserMutation>;
export type CreateUserMutationOptions = Apollo.BaseMutationOptions<CreateUserMutation, CreateUserMutationVariables>;
export const GetUsersDocument = gql`
    query GetUsers {
  users {
    id
    age
    name
    email
  }
}
    `;

/**
 * __useGetUsersQuery__
 *
 * To run a query within a React component, call `useGetUsersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUsersQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetUsersQuery(baseOptions?: Apollo.QueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {
        return Apollo.useQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, baseOptions);
      }
export function useGetUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {
          return Apollo.useLazyQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, baseOptions);
        }
export type GetUsersQueryHookResult = ReturnType<typeof useGetUsersQuery>;
export type GetUsersLazyQueryHookResult = ReturnType<typeof useGetUsersLazyQuery>;
export type GetUsersQueryResult = Apollo.QueryResult<GetUsersQuery, GetUsersQueryVariables>;
export const ValidateUserDocument = gql`
    query ValidateUser($name: String!, $age: Int!, $email: String!) {
  validateUser(name: $name, age: $age, email: $email) {
    errors
    isValid
  }
}
    `;

/**
 * __useValidateUserQuery__
 *
 * To run a query within a React component, call `useValidateUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useValidateUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useValidateUserQuery({
 *   variables: {
 *      name: // value for 'name'
 *      age: // value for 'age'
 *      email: // value for 'email'
 *   },
 * });
 */
export function useValidateUserQuery(baseOptions?: Apollo.QueryHookOptions<ValidateUserQuery, ValidateUserQueryVariables>) {
        return Apollo.useQuery<ValidateUserQuery, ValidateUserQueryVariables>(ValidateUserDocument, baseOptions);
      }
export function useValidateUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ValidateUserQuery, ValidateUserQueryVariables>) {
          return Apollo.useLazyQuery<ValidateUserQuery, ValidateUserQueryVariables>(ValidateUserDocument, baseOptions);
        }
export type ValidateUserQueryHookResult = ReturnType<typeof useValidateUserQuery>;
export type ValidateUserLazyQueryHookResult = ReturnType<typeof useValidateUserLazyQuery>;
export type ValidateUserQueryResult = Apollo.QueryResult<ValidateUserQuery, ValidateUserQueryVariables>;